<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright (c) 2016 Tresys Technology, LLC. All rights reserved.

Developed by: Tresys Technology, LLC
              http://www.tresys.com

Permission is hereby granted, free of charge, to any person obtaining a copy of
this software and associated documentation files (the "Software"), to deal with
the Software without restriction, including without limitation the rights to
use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies
of the Software, and to permit persons to whom the Software is furnished to do
so, subject to the following conditions:

 1. Redistributions of source code must retain the above copyright notice,
    this list of conditions and the following disclaimers.

 2. Redistributions in binary form must reproduce the above copyright
    notice, this list of conditions and the following disclaimers in the
    documentation and/or other materials provided with the distribution.

 3. Neither the names of Tresys Technology, nor the names of its contributors
    may be used to endorse or promote products derived from this Software
    without specific prior written permission.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
CONTRIBUTORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS WITH THE
SOFTWARE.
-->


<!--
Version 0.0.1  nitf.dfdl.xsd

This DFDL schema provides a DFDL model for NITF v2.1/NSIF v1.0.

The message root is 'NITF'.
-->


<xs:schema xmlns:xs="http://www.w3.org/2001/XMLSchema"
           xmlns:dfdl="http://www.ogf.org/dfdl/dfdl-1.0/"
           xmlns:fn="http://www.w3.org/2005/xpath-functions"
           xmlns:daf="urn:ogf:dfdl:2013:imp:opensource.ncsa.illinois.edu:2012:ext"
           xmlns:nitf="urn:nitf:2.1"
           targetNamespace="urn:nitf:2.1"
           elementFormDefault="unqualified">

  <xs:annotation>
    <xs:appinfo source="http://www.ogf.org/dfdl/">

      <dfdl:format representation="text" alignment="1" alignmentUnits="bytes"
        binaryBooleanFalseRep="0" binaryBooleanTrueRep="1"
        binaryCalendarEpoch="1970-01-01T00:00:00+00:00" binaryCalendarRep="bcd"
        binaryDecimalVirtualPoint="0" binaryFloatRep="ieee"
        binaryNumberCheckPolicy="lax" binaryNumberRep="binary"
        binaryPackedSignCodes="C D F C" calendarCenturyStart="53"
        calendarCheckPolicy="lax" calendarDaysInFirstWeek="4"
        calendarFirstDayOfWeek="Monday" calendarLanguage="en-US"
        calendarObserveDST="yes" calendarPatternKind="implicit"
        calendarPattern="yyyy-MM-dd'T'HH:mm:ss" calendarTimeZone="UTC"
        choiceLengthKind="implicit" decimalSigned="yes"
        documentFinalTerminatorCanBeMissing="no" emptyValueDelimiterPolicy="none"
        encoding="us-ascii" encodingErrorPolicy="error" escapeSchemeRef=""
        fillByte="%NUL;" floating="no" ignoreCase="no" initiatedContent="no"
        initiator="" leadingSkip="0" lengthKind="implicit" lengthUnits="bytes"
        nilKind="literalValue" nilValueDelimiterPolicy="none" nilValue="%SP;"
        occursCountKind="implicit" outputNewLine="%CR;%LF;"
        prefixIncludesPrefixLength="no" separator=""
        separatorPosition="infix" sequenceKind="ordered" terminator=""
        textBidi="no" textBooleanFalseRep="false" textBooleanJustification="left"
        textBooleanPadCharacter="%SP;" textBooleanTrueRep="true"
        textCalendarJustification="left" textCalendarPadCharacter="%SP;"
        textNumberCheckPolicy="strict" textNumberJustification="right"
        textNumberPadCharacter="0" textNumberPattern="#0" textNumberRep="standard"
        textNumberRoundingIncrement="0.0" textNumberRoundingMode="roundUp"
        textNumberRounding="pattern" textOutputMinLength="0" textPadKind="none"
        textStandardBase="10" textStandardDecimalSeparator="."
        textStandardGroupingSeparator="," textStandardInfinityRep="Inf"
        textStandardNaNRep="NaN" textStandardZeroRep="" textStandardExponentRep=""
        textStringJustification="left" textStringPadCharacter="%SP;"
        textTrimKind="none" textZonedSignStyle="asciiStandard" trailingSkip="0"
        truncateSpecifiedLengthString="no" useNilForDefault="no" utf16Width="fixed"
        bitOrder="mostSignificantBitFirst" byteOrder="bigEndian"/>

    </xs:appinfo>
  </xs:annotation>

  <!-- Should only 0x20-0x7E and 0xA0-0xFF -->
  <xs:simpleType name="ECS-A" dfdl:lengthKind="explicit" dfdl:textTrimKind="padChar" dfdl:nilKind="literalValue" dfdl:nilValue="%ES;">
    <xs:restriction base="xs:string" />
  </xs:simpleType>

  <!-- Should only allow space, tilde, and 0x20-0x7E -->
  <xs:simpleType name="BCS-A" dfdl:lengthKind="explicit" dfdl:textTrimKind="padChar" dfdl:nilKind="literalValue" dfdl:nilValue="%ES;">
    <xs:restriction base="xs:string" />
  </xs:simpleType>

  <!-- Should only allow plus, minus, and digits 0-9 -->
  <xs:simpleType name="BCS-N" dfdl:lengthKind="explicit" dfdl:textTrimKind="none" dfdl:textNumberPattern="#0" >
    <xs:restriction base="xs:long" />
  </xs:simpleType>

  <!-- Should only allow digits 0-9. This must only be used for types less than or equal to 9 digits long -->
  <xs:simpleType name="BCS-NP" dfdl:lengthKind="explicit" dfdl:textTrimKind="none" dfdl:textNumberPattern="#0" >
    <xs:restriction base="xs:unsignedInt" />
  </xs:simpleType>

  <!-- Should only allow digits 0-9. For performance, this should only be used for types greather than 9 digits long -->
  <xs:simpleType name="BCS-NPbig" dfdl:lengthKind="explicit" dfdl:textTrimKind="none" dfdl:textNumberPattern="#0" >
    <xs:restriction base="xs:unsignedLong" />
  </xs:simpleType>

  <xs:simpleType name="dateTime" dfdl:lengthKind="explicit" dfdl:length="14" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyyMMddHHmmss" dfdl:nilKind="literalCharacter" dfdl:nilValue="%SP;">
    <xs:restriction base="xs:dateTime" />
  </xs:simpleType>

  <xs:simpleType name="date" dfdl:lengthKind="explicit" dfdl:length="8" dfdl:calendarPatternKind="explicit" dfdl:calendarPattern="yyyyMMdd" dfdl:nilKind="literalCharacter" dfdl:nilValue="%SP;">
    <xs:restriction base="xs:date" />
  </xs:simpleType>


  <xs:element name="NITF">
    <xs:complexType>
      <xs:sequence>
        <xs:element name="Header">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="FileProfileName" type="nitf:BCS-A" dfdl:length="4">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="File Profile Name must equal 'NITF' or 'NSIF'" test="{ (. eq 'NITF') or (. eq 'NSIF') }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="FileVersion" type="nitf:BCS-A" dfdl:length="5">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="File Version must equal '02.10' for NTIF or '01.00' for NSIF" test="{ ((../FileProfileName eq 'NITF') and (. eq '02.10')) or ((../FileProfileName eq 'NSIF') and (. eq '01.00')) }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="ComplexityLevel" type="nitf:BCS-NP" dfdl:length="2" />
              <xs:element name="StandardType" type="nitf:BCS-A" dfdl:length="4">
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="Standard Type must equal 'BF01'" test="{ . eq 'BF01' }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="OriginatingStationID" type="nitf:BCS-A" dfdl:length="10" />
              <xs:element name="FileDateAndTime" type="nitf:dateTime" />
              <xs:element name="FileTitle" type="nitf:ECS-A" dfdl:length="80" nillable="true" />
              <xs:group ref="nitf:ClassificationInformation"/>
              <xs:element name="FileCopyNumber" type="nitf:BCS-NP" dfdl:length="5" />
              <xs:element name="FileNumberOfCopies" type="nitf:BCS-NP" dfdl:length="5" />
              <xs:element name="Encryption" type="nitf:BCS-N" dfdl:length="1" />
              <xs:element name="FileBackgroundColor">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="Red" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="1" />
                    <xs:element name="Green" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="1" />
                    <xs:element name="Blue" type="xs:hexBinary" dfdl:lengthKind="explicit" dfdl:length="1" />
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="OriginatorsName" type="nitf:ECS-A" dfdl:length="24" nillable="true" />
              <xs:element name="OriginatorsPhoneNumber" type="nitf:ECS-A" dfdl:length="18" nillable="true" />
              <xs:element name="FileLength" type="nitf:BCS-NPbig" dfdl:length="12" >
                <xs:annotation>
                  <xs:appinfo source="http://www.ogf.org/dfdl/">
                    <dfdl:assert message="FileLength of 999999999999 (unknown file length when header was created) is not supported." test="{ . ne 999999999999 }" />
                  </xs:appinfo>
                </xs:annotation>
              </xs:element>
              <xs:element name="FileHeaderLength" type="nitf:BCS-NP" dfdl:length="6" />
              <xs:element name="NumberOfImageSegments" type="nitf:BCS-NP" dfdl:length="3" />
              <xs:element name="ImageSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfImageSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitf:BCS-NP" dfdl:length="6">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 999999 (unknown image header length when header was created) is not supported." test="{ . ne 999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitf:BCS-NPbig" dfdl:length="10">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999999999 (unknown image data length when header was created) is not supported." test="{ . ne 9999999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="NumberOfGraphicSegments" type="nitf:BCS-NP" dfdl:length="3" />
              <xs:element name="GraphicSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfGraphicSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitf:BCS-NP" dfdl:length="4">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown graphic header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitf:BCS-NP" dfdl:length="6">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 999999 (unknown graphic data length when header was created) is not supported." test="{ . ne 999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="ReservedForFutureUse" type="nitf:BCS-NP" dfdl:length="3" />
              <xs:element name="NumberOfTextSegments" type="nitf:BCS-NP" dfdl:length="3" />
              <xs:element name="TextSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfTextSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitf:BCS-NP" dfdl:length="4">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown text header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitf:BCS-NP" dfdl:length="5">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 99999 (unknown text data length when header was created) is not supported." test="{ . ne 99999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="NumberOfDataExtensionSegments" type="nitf:BCS-NP" dfdl:length="3" />
              <xs:element name="DataExtensionSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfDataExtensionSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitf:BCS-NP" dfdl:length="4">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown data extension header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitf:BCS-NP" dfdl:length="9">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 999999999 (unknown data extension data length when header was created) is not supported." test="{ . ne 999999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="NumberOfReservedExtensionSegments" type="nitf:BCS-NP" dfdl:length="3" />
              <xs:element name="ReservedExtensionSegmentLengths" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../NumberOfReservedExtensionSegments }">
                <xs:complexType>
                  <xs:sequence>
                    <xs:element name="HeaderLength" type="nitf:BCS-NP" dfdl:length="4">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999 (unknown reserved extension header length when header was created) is not supported." test="{ . ne 9999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                    <xs:element name="DataLength" type="nitf:BCS-NP" dfdl:length="7">
                      <xs:annotation>
                        <xs:appinfo source="http://www.ogf.org/dfdl/">
                          <dfdl:assert message="FileLength of 9999999 (unknown reserved extension data length when header was created) is not supported." test="{ . ne 9999999 }" />
                        </xs:appinfo>
                      </xs:annotation>
                    </xs:element>
                  </xs:sequence>
                </xs:complexType>
              </xs:element>
              <xs:element name="UserDefinedHeaderDataLength" type="nitf:BCS-NP" dfdl:length="5" />
              <xs:element name="UserDefinedHeaderOverflow" minOccurs="0" type="nitf:BCS-NP" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../UserDefinedHeaderDataLength eq 0) then 0 else 1 }" />
              <xs:element name="UserDefinedHeaderData" minOccurs="0" type="xs:hexBinary" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../UserDefinedHeaderDataLength eq 0) then 0 else 1 }" dfdl:lengthKind="explicit" dfdl:length="{ ../UserDefinedHeaderDataLength - 3 }" /> <!-- TODO: user defined type -->
              <xs:element name="ExtendedHeaderDataLength" type="nitf:BCS-NP" dfdl:length="5" />
              <xs:element name="ExtendedHeaderDataOverflow" minOccurs="0" type="nitf:BCS-NP" dfdl:length="3" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../ExtendedHeaderDataLength eq 0) then 0 else 1 }" />
              <xs:element name="ExtendedHeaderData" minOccurs="0" type="xs:hexBinary" dfdl:occursCountKind="expression" dfdl:occursCount="{ if (../ExtendedHeaderDataLength eq 0) then 0 else 1 }" dfdl:lengthKind="explicit" dfdl:length="{ ../ExtendedHeaderDataLength - 3 }" /> <!-- TODO: TRE type? -->
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="ImageSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfImageSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ImageSegmentLengths[dfdl:occursIndex()]/HeaderLength }" />
              <xs:element name="Data" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ImageSegmentLengths[dfdl:occursIndex()]/DataLength }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="GraphicSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfGraphicSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/GraphicSegmentLengths[dfdl:occursIndex()]/HeaderLength }" />
              <xs:element name="Data" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/GraphicSegmentLengths[dfdl:occursIndex()]/DataLength }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="TextSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfTextSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/TextSegmentLengths[dfdl:occursIndex()]/HeaderLength }" />
              <xs:element name="Data" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/TextSegmentLengths[dfdl:occursIndex()]/DataLength }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="DataExtensionSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfDataExtensionSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/DataExtensionSegmentLengths[dfdl:occursIndex()]/HeaderLength }" />
              <xs:element name="Data" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/DataExtensionSegmentLengths[dfdl:occursIndex()]/DataLength }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

        <xs:element name="ReservedExtensionSegment" minOccurs="0" maxOccurs="999" dfdl:occursCountKind="expression" dfdl:occursCount="{ ../Header/NumberOfReservedExtensionSegments }">
          <xs:complexType>
            <xs:sequence>
              <xs:element name="Header" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ReservedExtensionSegmentLengths[dfdl:occursIndex()]/HeaderLength }" />
              <xs:element name="Data" type="xs:hexBinary" dfdl:representation="binary" dfdl:lengthKind="explicit" dfdl:length="{ ../../Header/ReservedExtensionSegmentLengths[dfdl:occursIndex()]/DataLength }" />
            </xs:sequence>
          </xs:complexType>
        </xs:element>

      </xs:sequence>
    </xs:complexType>
  </xs:element>

  <xs:group name="ClassificationInformation">
    <xs:sequence>
      <xs:element name="SecurityClassification" dfdl:length="1">
        <xs:simpleType>
          <xs:restriction base="nitf:ECS-A">
            <xs:enumeration value="T"/>
            <xs:enumeration value="S"/>
            <xs:enumeration value="C"/>
            <xs:enumeration value="R"/>
            <xs:enumeration value="U"/>
          </xs:restriction>
        </xs:simpleType>
      </xs:element>
      <!-- TODO: all these classificiation fields are validated based on FileSecurityClassification and other information -->
      <xs:element name="SecurityClassificationSystem" type="nitf:ECS-A" dfdl:length="2" nillable="true" />
      <xs:element name="Codewords" type="nitf:BCS-A" dfdl:length="11" nillable="true" />
      <xs:element name="ControlAndHandling" type="nitf:ECS-A" dfdl:length="2" nillable="true" />
      <xs:element name="ReleasingInstructions" type="nitf:ECS-A" dfdl:length="20" nillable="true" />
      <xs:element name="DeclassificationType" type="nitf:ECS-A" dfdl:length="2" nillable="true" />
      <xs:element name="DeclassificationDate" type="nitf:ECS-A" dfdl:length="8" nillable="true" />
      <xs:element name="DeclassificationExemption" type="nitf:ECS-A" dfdl:length="4" nillable="true" />
      <xs:element name="Downgrade" type="nitf:ECS-A" dfdl:length="1" nillable="true" />
      <xs:element name="DowngradeDate" type="nitf:date" nillable="true" />
      <xs:element name="ClassificationText" type="nitf:ECS-A" dfdl:length="43" nillable="true" />
      <xs:element name="ClassificationAuthorityType" type="nitf:ECS-A" dfdl:length="1" nillable="true" />
      <xs:element name="ClassificationAuthority" type="nitf:ECS-A" dfdl:length="40" nillable="true" />
      <xs:element name="ClassificationReason" type="nitf:ECS-A" dfdl:length="1" nillable="true" />
      <xs:element name="SecuritySourceDate" type="nitf:date" nillable="true" />
      <xs:element name="SecurityControlNumber" type="nitf:ECS-A" dfdl:length="15" nillable="true" />
    </xs:sequence>
  </xs:group>

</xs:schema>
